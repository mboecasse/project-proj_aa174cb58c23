name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/test_db
          JWT_ACCESS_SECRET: test_jwt_access_secret_for_ci_pipeline_must_be_long
          JWT_ACCESS_EXPIRY: 15m
          JWT_REFRESH_SECRET: test_jwt_refresh_secret_for_ci_pipeline_must_be_long
          JWT_REFRESH_EXPIRY: 7d
          EMAIL_HOST: smtp.test.com
          EMAIL_PORT: 587
          EMAIL_USER: test@test.com
          EMAIL_PASSWORD: test_password
          EMAIL_FROM: noreply@test.com

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/test_db
          JWT_ACCESS_SECRET: test_jwt_access_secret_for_ci_pipeline_must_be_long
          JWT_ACCESS_EXPIRY: 15m
          JWT_REFRESH_SECRET: test_jwt_refresh_secret_for_ci_pipeline_must_be_long
          JWT_REFRESH_EXPIRY: 7d
          EMAIL_HOST: smtp.test.com
          EMAIL_PORT: 587
          EMAIL_USER: test@test.com
          EMAIL_PASSWORD: test_password
          EMAIL_FROM: noreply@test.com

      - name: Generate coverage report
        run: npm run test:coverage
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/test_db
          JWT_ACCESS_SECRET: test_jwt_access_secret_for_ci_pipeline_must_be_long
          JWT_ACCESS_EXPIRY: 15m
          JWT_REFRESH_SECRET: test_jwt_refresh_secret_for_ci_pipeline_must_be_long
          JWT_REFRESH_EXPIRY: 7d
          EMAIL_HOST: smtp.test.com
          EMAIL_PORT: 587
          EMAIL_USER: test@test.com
          EMAIL_PASSWORD: test_password
          EMAIL_FROM: noreply@test.com

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build --if-present

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist
          retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # Add deployment commands here (e.g., SSH, Docker, Kubernetes)
        env:
          DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
          STAGING_HOST: ${{ secrets.STAGING_HOST }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://api.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # Add deployment commands here (e.g., SSH, Docker, Kubernetes)
        env:
          DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}

      - name: Notify deployment
        if: success()
        run: |
          echo "Production deployment successful"
          # Add notification logic (Slack, email, etc.)

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # Add rollback logic here

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: always()

    steps:
      - name: Send notification
        run: |
          echo "Pipeline completed with status: ${{ job.status }}"
          # Add notification logic (Slack, Discord, email, etc.)
